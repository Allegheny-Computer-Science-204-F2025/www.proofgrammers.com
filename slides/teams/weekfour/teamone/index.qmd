---
title: "`yesOnString` is Uncomputable"
description: "Explore the limits of `yesOnString`"
date: "2025-09-15"
date-format: long
author: Benedek Kaibas, Issei Hasegawa, Cullen Doyle
execute:
  echo: true
format:
  live-revealjs:
    completion: true
    theme: default
    css: ../../../css/styles.css
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    footer: "Proofgrammers"
---



## What is yesOnString?

- Decision problem
  - Inputs: A Python program (P), A string input (s)

- **Question**: Does program P, when run on input s, return "yes"?

- When does the program return "no"?
  - Invalid program, undefined output, non-"yes" as a program return

## Code

```{pyodide}
#| autorun: false
#| max-lines: 20
"""This file contains a basic yesOnString function."""

def returnYesOnString(some_string: str) -> str:
    """This function always says yes."""
    return "yes"

def yesOnString(program_input: str, input_string: str):
    """Return yes on valid P, if input is defnied and P(I) is yes."""
    if program_input == 'returnYesOnString.py' and isinstance(input_string, str):
            return returnYesOnString(input_string)
    if not program_input.endswith(".py"):
        error = f"{program_input} either does not exist or is not a valid Python program."
        return error
    if not isinstance(input_string, str):
        error = f"{input_string} is not a string!"
        return error

print(yesOnString("returnYesOnString.py", "Go Gators!"))
print(yesOnString("returnYesOnString.cpp", "Go Gators!"))
print(yesOnString("returnYesOnString.py", 1))
```

::: {.fragment style="margin-top: 0.25em; font-size: 0.9em;"}

:::

## Proof By Contradiction

::: {.fragment style="margin-top: -0.5em; font-size: 0.8em;"} 

- {{< iconify fa6-solid lightbulb >}} **What is theory of computation?**
    - Assume yesOnString exists 

:::

# Similarity to Halting Program

::: {.fragment style="margin-top: -0.5em; font-size: 0.8em;"} 

- {{< iconify fa6-solid lightbulb >}} **What is theory of computation?**
    - Understanding what can be computed
    - Analyzing computational complexity
    - Proving limits of computation
    - "Proofgrammers" combine *proofs* and *programming*

:::

## Conclusion

::: {.fragment style="margin-top: -0.5em; font-size: 0.8em;"} 

- {{< iconify fa6-solid lightbulb >}} **What is theory of computation?**
    - Understanding what can be computed
    - Analyzing computational complexity
    - Proving limits of computation
    - "Proofgrammers" combine *proofs* and *programming*

:::
