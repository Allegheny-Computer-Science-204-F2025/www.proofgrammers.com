---
title: "Better understanding the `startsWithZ` Proof by Contradiction"
description: "Explore the limits of `startsWithZ`"
date: "2025-10-02"
date-format: long
author: Alexander Goddard, Issei Hasegawa, Javier Bejarano Jimenez, Miguel Orti Vila
execute:
  echo: true
format:
  live-revealjs:
    completion: true
    theme: default
    css: ../../../css/styles.css
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    footer: "Proofgrammers"
---

## Introduction

::: {.fragment}
- Today, we will talk about the problem called `startsWithZ`.  
- The question is simple: **Can we decide whether a program‚Äôs output begins with the letter ‚ÄúZ‚Äù?**
- At first glance, this looks easy‚Äîjust run the program and check its output.  
- However, we will see that this problem is actually uncomputable,
  and we will explain why using a **proof by contradiction**.  
:::

## Proof by Contradiction

::: {.fragment}
**Step 1 ‚Äî Assumption**

- Suppose `startsWithZ` exists and always decides correctly.

**Step 2 ‚Äî Trap Construction**

- Then we can define:

  - `startsWithZSelf(P)`: checks if program `P`, when given itself as input, outputs a string that **starts with Z**.

  - `notStartsWithZSelf(P)`: does the opposite ‚Äî it returns ‚Äúyes‚Äù if `P`, when given itself as input, outputs a string that **does not start with Z**.

**Step 3 ‚Äî Contradiction**

- Consider the program `weirdStartsWithZ`, which calls `startsWithZ` on its own code and returns the opposite:

  - If `startsWithZ` says ‚Äúyes,‚Äù it returns ‚Äúno.‚Äù

  - If `startsWithZ` says ‚Äúno,‚Äù it returns ‚Äúyes.‚Äù

- When `weirdStartsWithZ` is run on itself, it returns ‚Äúyes‚Äù **iff** it returns ‚Äúno.‚Äù And it returns ‚Äúno‚Äù iff it returns ‚Äúyes.‚Äù

- This is impossible, so our assumption was false.  

**Conclusion**

- Therefore, `startsWithZ` cannot exist.
:::


## Python Contradiction Test

```{pyodide}
#| autorun: true
#| max-lines: 16
def weirdStartsWithZ(test_case):
    def programOutput():  # Contradicts any startsWithZ test cases
        # Inverts the test_case's answer
        return 'Not_Z' if test_case(programOutput) else 'Z'
    return programOutput

print("üîç Testing both possible test_case answers:")
print("=" * 59)

for test_answer in [True, False]:
    def test_case(_):  # Test case that always returns the same answer
        return test_answer
    
    programOutput = weirdStartsWithZ(test_case)  # Apply test_case to itself
    test_prediction = test_case(programOutput)   # What the test_case predicts
    actual = programOutput().startswith('Z')     # What actually happens
    status = "‚ùå CONTRADICTION" if test_prediction != actual else "‚úÖ CONSISTENT"
    print(f"Test Case Output: {test_prediction:5} | Reality: {actual:5} | {status}")
```

::: {.fragment .boxed-content}
**The contradiction is unavoidable** - every possible prediction leads to a logical impossibility, proving that `startsWithZ` cannot exist.
:::

## Why the `startsWithZ` Proof by Contradiction can be Confusing

::: {.fragment}
- The concept of self-referential code can be difficult to understand. What will happen when the code runs on itself can be tough to wrap your head around.
- It seems like something that should be computable even though it isn't.
- Each step is carefully built on top of the other so if you misunderstand one part the rest will seem confusing.
- Due to the intricacy of steps inconsistency in wording/phrasing can lead to major confusion.
:::

## Some Ways that Helped Us Better Understand It 

::: {.fragment}
- Focus: Static vs. Dynamic Analysis
- **Static Analysis**
  - Analyze the *code structure* without running it (just look).
  - Typically computable.

- **Dynamic Analysis**
  - Analyze the *output* of a program.
  - Imagine *running the program with itself as input*.
  - More likely to be uncompuatble.
:::

## Conclusion

::: {.fragment}
- The `startsWithZ` proof shows how **self-reference leads to contradiction**.
- Even problems that look simple can be **uncomputable** when programs analyze their own behavior.
- By contrasting *static* (structure-based) and *dynamic* (output-based) analysis, we gain insight into why some problems are computable while others are not.
- Ultimately, `startsWithZ` reminds us of the **limits of computation** and the power of **proof by contradiction**.
:::
